ANS:1 -- Given the root of a binary tree, return the inorder traversal of its nodes' values.
class Solution
 {
    public List<Integer> inorderTraversal(TreeNode root) 
    {
        List<Integer> res =new ArrayList<>();
        helper(root,res);
        return res;

    }
    public void helper(TreeNode root,List<Integer> res)
    {
       if(root!=null)
       {
           helper(root.left,res);
           res.add(root.val);
           helper(root.right,res);
       }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:2--  Given the root of a binary tree, return the preorder traversal of its nodes' values.
class Solution {
    public List<Integer> preorderTraversal(TreeNode root)
     {
        
    
        List<Integer> res =new ArrayList<>();
        helper(root,res);
        return res;

    }
    public void helper(TreeNode root,List<Integer> res)
    {
       if(root!=null)
       {
            res.add(root.val);
           helper(root.left,res);
          
           helper(root.right,res);
       }
    }
    
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:3-- Given the root of a binary tree, return the postorder traversal of its nodes' values.

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
       
        
    
        List<Integer> res =new ArrayList<>();
        helper(root,res);
        return res;

    }
    public void helper(TreeNode root,List<Integer> res)
    {
       if(root!=null)
       {
           
           helper(root.left,res);
          
           helper(root.right,res);
            res.add(root.val);
       }
    }
    
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:4--- Maximum Depth of Binary Tree.
class Solution
 {
    public int maxDepth(TreeNode root)
     {
        if(root==null)
        {
            return 0;
        }
        int lh=maxDepth(root.left);
        int rh=maxDepth(root.right);
        return Math.max(lh,rh)+1;
    }
   
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ANS:5---- 
